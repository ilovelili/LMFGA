/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface KyberNetworkProxyInterface extends ethers.utils.Interface {
  functions: {
    "enabled()": FunctionFragment;
    "getExpectedRate(address,address,uint256)": FunctionFragment;
    "getUserCapInTokenWei(address,address)": FunctionFragment;
    "getUserCapInWei(address)": FunctionFragment;
    "info(bytes32)": FunctionFragment;
    "maxGasPrice()": FunctionFragment;
    "swapEtherToToken(address,uint256)": FunctionFragment;
    "swapTokenToEther(address,uint256,uint256)": FunctionFragment;
    "swapTokenToToken(address,uint256,address,uint256)": FunctionFragment;
    "tradeWithHint(address,uint256,address,address,uint256,uint256,address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "enabled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExpectedRate",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCapInTokenWei",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCapInWei",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "info", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "maxGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapEtherToToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenToEther",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenToToken",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeWithHint",
    values: [
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "enabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCapInTokenWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCapInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEtherToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenToEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeWithHint",
    data: BytesLike
  ): Result;

  events: {};
}

export class KyberNetworkProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: KyberNetworkProxyInterface;

  functions: {
    enabled(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "enabled()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      expectedRate: BigNumber;
      slippageRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getExpectedRate(address,address,uint256)"(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      expectedRate: BigNumber;
      slippageRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getUserCapInTokenWei(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUserCapInTokenWei(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getUserCapInWei(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUserCapInWei(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    info(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "info(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maxGasPrice(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxGasPrice()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    swapEtherToToken(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swapEtherToToken(address,uint256)"(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    swapTokenToEther(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokenToEther(address,uint256,uint256)"(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapTokenToToken(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokenToToken(address,uint256,address,uint256)"(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tradeWithHint(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      hint: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "tradeWithHint(address,uint256,address,address,uint256,uint256,address,bytes)"(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      hint: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  enabled(overrides?: CallOverrides): Promise<boolean>;

  "enabled()"(overrides?: CallOverrides): Promise<boolean>;

  getExpectedRate(
    src: string,
    dest: string,
    srcQty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    expectedRate: BigNumber;
    slippageRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getExpectedRate(address,address,uint256)"(
    src: string,
    dest: string,
    srcQty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    expectedRate: BigNumber;
    slippageRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getUserCapInTokenWei(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserCapInTokenWei(address,address)"(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserCapInWei(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getUserCapInWei(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  info(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "info(bytes32)"(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "maxGasPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  swapEtherToToken(
    token: string,
    minConversionRate: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swapEtherToToken(address,uint256)"(
    token: string,
    minConversionRate: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  swapTokenToEther(
    token: string,
    srcAmount: BigNumberish,
    minConversionRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokenToEther(address,uint256,uint256)"(
    token: string,
    srcAmount: BigNumberish,
    minConversionRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapTokenToToken(
    src: string,
    srcAmount: BigNumberish,
    dest: string,
    minConversionRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokenToToken(address,uint256,address,uint256)"(
    src: string,
    srcAmount: BigNumberish,
    dest: string,
    minConversionRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tradeWithHint(
    src: string,
    srcAmount: BigNumberish,
    dest: string,
    destAddress: string,
    maxDestAmount: BigNumberish,
    minConversionRate: BigNumberish,
    walletId: string,
    hint: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "tradeWithHint(address,uint256,address,address,uint256,uint256,address,bytes)"(
    src: string,
    srcAmount: BigNumberish,
    dest: string,
    destAddress: string,
    maxDestAmount: BigNumberish,
    minConversionRate: BigNumberish,
    walletId: string,
    hint: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    enabled(overrides?: CallOverrides): Promise<boolean>;

    "enabled()"(overrides?: CallOverrides): Promise<boolean>;

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      expectedRate: BigNumber;
      slippageRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getExpectedRate(address,address,uint256)"(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      expectedRate: BigNumber;
      slippageRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getUserCapInTokenWei(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserCapInTokenWei(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCapInWei(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserCapInWei(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    info(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "info(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "maxGasPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapEtherToToken(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapEtherToToken(address,uint256)"(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapTokenToEther(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapTokenToEther(address,uint256,uint256)"(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapTokenToToken(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapTokenToToken(address,uint256,address,uint256)"(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeWithHint(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      hint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tradeWithHint(address,uint256,address,address,uint256,uint256,address,bytes)"(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      hint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    enabled(overrides?: CallOverrides): Promise<BigNumber>;

    "enabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExpectedRate(address,address,uint256)"(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCapInTokenWei(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserCapInTokenWei(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCapInWei(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserCapInWei(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    info(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "info(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "maxGasPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapEtherToToken(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swapEtherToToken(address,uint256)"(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    swapTokenToEther(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokenToEther(address,uint256,uint256)"(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapTokenToToken(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokenToToken(address,uint256,address,uint256)"(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tradeWithHint(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      hint: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "tradeWithHint(address,uint256,address,address,uint256,uint256,address,bytes)"(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      hint: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    enabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "enabled()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExpectedRate(address,address,uint256)"(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserCapInTokenWei(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserCapInTokenWei(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserCapInWei(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserCapInWei(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    info(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "info(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxGasPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapEtherToToken(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swapEtherToToken(address,uint256)"(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    swapTokenToEther(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokenToEther(address,uint256,uint256)"(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapTokenToToken(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokenToToken(address,uint256,address,uint256)"(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tradeWithHint(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      hint: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "tradeWithHint(address,uint256,address,address,uint256,uint256,address,bytes)"(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      hint: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
