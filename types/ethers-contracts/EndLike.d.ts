/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface EndLikeInterface extends ethers.utils.Interface {
  functions: {
    "fix(bytes32)": FunctionFragment;
    "cash(bytes32,uint256)": FunctionFragment;
    "free(bytes32)": FunctionFragment;
    "pack(uint256)": FunctionFragment;
    "skim(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "fix", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "cash",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "free", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "pack", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "skim",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "fix", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "free", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;

  events: {};
}

export class EndLike extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: EndLikeInterface;

  functions: {
    fix(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "fix(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cash(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cash(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    free(arg0: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

    "free(bytes32)"(
      arg0: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pack(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pack(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    skim(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "skim(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  fix(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "fix(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cash(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cash(bytes32,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  free(arg0: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

  "free(bytes32)"(
    arg0: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pack(arg0: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "pack(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  skim(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "skim(bytes32,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    fix(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "fix(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cash(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cash(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    free(arg0: BytesLike, overrides?: CallOverrides): Promise<void>;

    "free(bytes32)"(arg0: BytesLike, overrides?: CallOverrides): Promise<void>;

    pack(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "pack(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    skim(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "skim(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    fix(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "fix(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cash(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cash(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    free(arg0: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "free(bytes32)"(arg0: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    pack(arg0: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "pack(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    skim(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "skim(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fix(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fix(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cash(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cash(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    free(arg0: BytesLike, overrides?: Overrides): Promise<PopulatedTransaction>;

    "free(bytes32)"(
      arg0: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pack(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pack(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    skim(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "skim(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
