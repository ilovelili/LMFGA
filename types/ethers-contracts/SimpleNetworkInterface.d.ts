/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SimpleNetworkInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "swapTokenToToken(address,uint256,address,uint256)": FunctionFragment;
    "swapEtherToToken(address,uint256)": FunctionFragment;
    "swapTokenToEther(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "swapTokenToToken",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEtherToToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenToEther",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "swapTokenToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEtherToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenToEther",
    data: BytesLike
  ): Result;

  events: {};
}

export class SimpleNetworkInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SimpleNetworkInterfaceInterface;

  functions: {
    swapTokenToToken(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokenToToken(address,uint256,address,uint256)"(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapEtherToToken(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swapEtherToToken(address,uint256)"(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    swapTokenToEther(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapTokenToEther(address,uint256,uint256)"(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  swapTokenToToken(
    src: string,
    srcAmount: BigNumberish,
    dest: string,
    minConversionRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokenToToken(address,uint256,address,uint256)"(
    src: string,
    srcAmount: BigNumberish,
    dest: string,
    minConversionRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapEtherToToken(
    token: string,
    minConversionRate: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swapEtherToToken(address,uint256)"(
    token: string,
    minConversionRate: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  swapTokenToEther(
    token: string,
    srcAmount: BigNumberish,
    minConversionRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapTokenToEther(address,uint256,uint256)"(
    token: string,
    srcAmount: BigNumberish,
    minConversionRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    swapTokenToToken(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapTokenToToken(address,uint256,address,uint256)"(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapEtherToToken(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapEtherToToken(address,uint256)"(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapTokenToEther(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapTokenToEther(address,uint256,uint256)"(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    swapTokenToToken(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokenToToken(address,uint256,address,uint256)"(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapEtherToToken(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swapEtherToToken(address,uint256)"(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    swapTokenToEther(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapTokenToEther(address,uint256,uint256)"(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swapTokenToToken(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokenToToken(address,uint256,address,uint256)"(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapEtherToToken(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swapEtherToToken(address,uint256)"(
      token: string,
      minConversionRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    swapTokenToEther(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapTokenToEther(address,uint256,uint256)"(
      token: string,
      srcAmount: BigNumberish,
      minConversionRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
