/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DssProxyActionsCommonInterface extends ethers.utils.Interface {
  functions: {
    "daiJoin_join(address,address,uint256)": FunctionFragment;
    "transfer(address,address,uint256)": FunctionFragment;
    "ethJoin_join(address,address)": FunctionFragment;
    "gemJoin_join(address,address,uint256,bool)": FunctionFragment;
    "hope(address,address)": FunctionFragment;
    "nope(address,address)": FunctionFragment;
    "open(address,bytes32,address)": FunctionFragment;
    "give(address,uint256,address)": FunctionFragment;
    "giveToProxy(address,address,uint256,address)": FunctionFragment;
    "cdpAllow(address,uint256,address,uint256)": FunctionFragment;
    "urnAllow(address,address,uint256)": FunctionFragment;
    "flux(address,uint256,address,uint256)": FunctionFragment;
    "move(address,uint256,address,uint256)": FunctionFragment;
    "frob(address,uint256,int256,int256)": FunctionFragment;
    "quit(address,uint256,address)": FunctionFragment;
    "enter(address,address,uint256)": FunctionFragment;
    "shift(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "daiJoin_join",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethJoin_join",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "gemJoin_join",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "hope",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nope",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "give",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "giveToProxy",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cdpAllow",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "urnAllow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flux",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "frob",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quit",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "enter",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shift",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "daiJoin_join",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethJoin_join",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gemJoin_join",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hope", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nope", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "give", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "giveToProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cdpAllow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "urnAllow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flux", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shift", data: BytesLike): Result;

  events: {};
}

export class DssProxyActionsCommon extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DssProxyActionsCommonInterface;

  functions: {
    daiJoin_join(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "daiJoin_join(address,address,uint256)"(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transfer(
      gem: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,address,uint256)"(
      gem: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ethJoin_join(
      apt: string,
      urn: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "ethJoin_join(address,address)"(
      apt: string,
      urn: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    gemJoin_join(
      apt: string,
      urn: string,
      wad: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "gemJoin_join(address,address,uint256,bool)"(
      apt: string,
      urn: string,
      wad: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hope(
      obj: string,
      usr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "hope(address,address)"(
      obj: string,
      usr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nope(
      obj: string,
      usr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "nope(address,address)"(
      obj: string,
      usr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    open(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "open(address,bytes32,address)"(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    give(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "give(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    giveToProxy(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "giveToProxy(address,address,uint256,address)"(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cdpAllow(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cdpAllow(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    urnAllow(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "urnAllow(address,address,uint256)"(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    flux(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flux(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    move(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "move(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    frob(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "frob(address,uint256,int256,int256)"(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    quit(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "quit(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enter(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enter(address,address,uint256)"(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shift(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "shift(address,uint256,uint256)"(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  daiJoin_join(
    apt: string,
    urn: string,
    wad: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "daiJoin_join(address,address,uint256)"(
    apt: string,
    urn: string,
    wad: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transfer(
    gem: string,
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,address,uint256)"(
    gem: string,
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ethJoin_join(
    apt: string,
    urn: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "ethJoin_join(address,address)"(
    apt: string,
    urn: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  gemJoin_join(
    apt: string,
    urn: string,
    wad: BigNumberish,
    transferFrom: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "gemJoin_join(address,address,uint256,bool)"(
    apt: string,
    urn: string,
    wad: BigNumberish,
    transferFrom: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hope(
    obj: string,
    usr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "hope(address,address)"(
    obj: string,
    usr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nope(
    obj: string,
    usr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "nope(address,address)"(
    obj: string,
    usr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  open(
    manager: string,
    ilk: BytesLike,
    usr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "open(address,bytes32,address)"(
    manager: string,
    ilk: BytesLike,
    usr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  give(
    manager: string,
    cdp: BigNumberish,
    usr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "give(address,uint256,address)"(
    manager: string,
    cdp: BigNumberish,
    usr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  giveToProxy(
    proxyRegistry: string,
    manager: string,
    cdp: BigNumberish,
    dst: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "giveToProxy(address,address,uint256,address)"(
    proxyRegistry: string,
    manager: string,
    cdp: BigNumberish,
    dst: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cdpAllow(
    manager: string,
    cdp: BigNumberish,
    usr: string,
    ok: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cdpAllow(address,uint256,address,uint256)"(
    manager: string,
    cdp: BigNumberish,
    usr: string,
    ok: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  urnAllow(
    manager: string,
    usr: string,
    ok: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "urnAllow(address,address,uint256)"(
    manager: string,
    usr: string,
    ok: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  flux(
    manager: string,
    cdp: BigNumberish,
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flux(address,uint256,address,uint256)"(
    manager: string,
    cdp: BigNumberish,
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  move(
    manager: string,
    cdp: BigNumberish,
    dst: string,
    rad: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "move(address,uint256,address,uint256)"(
    manager: string,
    cdp: BigNumberish,
    dst: string,
    rad: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  frob(
    manager: string,
    cdp: BigNumberish,
    dink: BigNumberish,
    dart: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "frob(address,uint256,int256,int256)"(
    manager: string,
    cdp: BigNumberish,
    dink: BigNumberish,
    dart: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  quit(
    manager: string,
    cdp: BigNumberish,
    dst: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "quit(address,uint256,address)"(
    manager: string,
    cdp: BigNumberish,
    dst: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enter(
    manager: string,
    src: string,
    cdp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enter(address,address,uint256)"(
    manager: string,
    src: string,
    cdp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shift(
    manager: string,
    cdpSrc: BigNumberish,
    cdpOrg: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "shift(address,uint256,uint256)"(
    manager: string,
    cdpSrc: BigNumberish,
    cdpOrg: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    daiJoin_join(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "daiJoin_join(address,address,uint256)"(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      gem: string,
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transfer(address,address,uint256)"(
      gem: string,
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ethJoin_join(
      apt: string,
      urn: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "ethJoin_join(address,address)"(
      apt: string,
      urn: string,
      overrides?: CallOverrides
    ): Promise<void>;

    gemJoin_join(
      apt: string,
      urn: string,
      wad: BigNumberish,
      transferFrom: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "gemJoin_join(address,address,uint256,bool)"(
      apt: string,
      urn: string,
      wad: BigNumberish,
      transferFrom: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    hope(obj: string, usr: string, overrides?: CallOverrides): Promise<void>;

    "hope(address,address)"(
      obj: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nope(obj: string, usr: string, overrides?: CallOverrides): Promise<void>;

    "nope(address,address)"(
      obj: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    open(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "open(address,bytes32,address)"(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    give(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "give(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    giveToProxy(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "giveToProxy(address,address,uint256,address)"(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cdpAllow(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cdpAllow(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    urnAllow(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "urnAllow(address,address,uint256)"(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flux(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "flux(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    move(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "move(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    frob(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "frob(address,uint256,int256,int256)"(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    quit(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "quit(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enter(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "enter(address,address,uint256)"(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shift(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "shift(address,uint256,uint256)"(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    daiJoin_join(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "daiJoin_join(address,address,uint256)"(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transfer(
      gem: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,address,uint256)"(
      gem: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ethJoin_join(
      apt: string,
      urn: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "ethJoin_join(address,address)"(
      apt: string,
      urn: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    gemJoin_join(
      apt: string,
      urn: string,
      wad: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "gemJoin_join(address,address,uint256,bool)"(
      apt: string,
      urn: string,
      wad: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hope(obj: string, usr: string, overrides?: Overrides): Promise<BigNumber>;

    "hope(address,address)"(
      obj: string,
      usr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    nope(obj: string, usr: string, overrides?: Overrides): Promise<BigNumber>;

    "nope(address,address)"(
      obj: string,
      usr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    open(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "open(address,bytes32,address)"(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    give(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "give(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    giveToProxy(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "giveToProxy(address,address,uint256,address)"(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cdpAllow(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cdpAllow(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    urnAllow(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "urnAllow(address,address,uint256)"(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    flux(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "flux(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    move(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "move(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    frob(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "frob(address,uint256,int256,int256)"(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    quit(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "quit(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enter(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enter(address,address,uint256)"(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shift(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "shift(address,uint256,uint256)"(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    daiJoin_join(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "daiJoin_join(address,address,uint256)"(
      apt: string,
      urn: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transfer(
      gem: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,address,uint256)"(
      gem: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ethJoin_join(
      apt: string,
      urn: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "ethJoin_join(address,address)"(
      apt: string,
      urn: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    gemJoin_join(
      apt: string,
      urn: string,
      wad: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "gemJoin_join(address,address,uint256,bool)"(
      apt: string,
      urn: string,
      wad: BigNumberish,
      transferFrom: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hope(
      obj: string,
      usr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "hope(address,address)"(
      obj: string,
      usr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nope(
      obj: string,
      usr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "nope(address,address)"(
      obj: string,
      usr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    open(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "open(address,bytes32,address)"(
      manager: string,
      ilk: BytesLike,
      usr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    give(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "give(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    giveToProxy(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "giveToProxy(address,address,uint256,address)"(
      proxyRegistry: string,
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cdpAllow(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cdpAllow(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    urnAllow(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "urnAllow(address,address,uint256)"(
      manager: string,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    flux(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flux(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    move(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "move(address,uint256,address,uint256)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    frob(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "frob(address,uint256,int256,int256)"(
      manager: string,
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    quit(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "quit(address,uint256,address)"(
      manager: string,
      cdp: BigNumberish,
      dst: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enter(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enter(address,address,uint256)"(
      manager: string,
      src: string,
      cdp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shift(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "shift(address,uint256,uint256)"(
      manager: string,
      cdpSrc: BigNumberish,
      cdpOrg: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
