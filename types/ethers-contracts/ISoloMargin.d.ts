/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISoloMarginInterface extends ethers.utils.Interface {
  functions: {
    "ownerSetSpreadPremium(uint256,tuple)": FunctionFragment;
    "getIsGlobalOperator(address)": FunctionFragment;
    "getMarketTokenAddress(uint256)": FunctionFragment;
    "ownerSetInterestSetter(uint256,address)": FunctionFragment;
    "getAccountValues(tuple)": FunctionFragment;
    "getMarketPriceOracle(uint256)": FunctionFragment;
    "getMarketInterestSetter(uint256)": FunctionFragment;
    "getMarketSpreadPremium(uint256)": FunctionFragment;
    "getNumMarkets()": FunctionFragment;
    "ownerWithdrawUnsupportedTokens(address,address)": FunctionFragment;
    "ownerSetMinBorrowedValue(tuple)": FunctionFragment;
    "ownerSetLiquidationSpread(tuple)": FunctionFragment;
    "ownerSetEarningsRate(tuple)": FunctionFragment;
    "getIsLocalOperator(address,address)": FunctionFragment;
    "getAccountPar(tuple,uint256)": FunctionFragment;
    "ownerSetMarginPremium(uint256,tuple)": FunctionFragment;
    "getMarginRatio()": FunctionFragment;
    "getMarketCurrentIndex(uint256)": FunctionFragment;
    "getMarketIsClosing(uint256)": FunctionFragment;
    "getRiskParams()": FunctionFragment;
    "getAccountBalances(tuple)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "getMinBorrowedValue()": FunctionFragment;
    "setOperators(tuple[])": FunctionFragment;
    "getMarketPrice(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "ownerWithdrawExcessTokens(uint256,address)": FunctionFragment;
    "ownerAddMarket(address,address,address,tuple,tuple)": FunctionFragment;
    "operate(tuple[],tuple[])": FunctionFragment;
    "getMarketWithInfo(uint256)": FunctionFragment;
    "ownerSetMarginRatio(tuple)": FunctionFragment;
    "getLiquidationSpread()": FunctionFragment;
    "getAccountWei(tuple,uint256)": FunctionFragment;
    "getMarketTotalPar(uint256)": FunctionFragment;
    "getLiquidationSpreadForPair(uint256,uint256)": FunctionFragment;
    "getNumExcessTokens(uint256)": FunctionFragment;
    "getMarketCachedIndex(uint256)": FunctionFragment;
    "getAccountStatus(tuple)": FunctionFragment;
    "getEarningsRate()": FunctionFragment;
    "ownerSetPriceOracle(uint256,address)": FunctionFragment;
    "getRiskLimits()": FunctionFragment;
    "getMarket(uint256)": FunctionFragment;
    "ownerSetIsClosing(uint256,bool)": FunctionFragment;
    "ownerSetGlobalOperator(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "getAdjustedAccountValues(tuple)": FunctionFragment;
    "getMarketMarginPremium(uint256)": FunctionFragment;
    "getMarketInterestRate(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ownerSetSpreadPremium",
    values: [BigNumberish, { value: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsGlobalOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketTokenAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetInterestSetter",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValues",
    values: [{ owner: string; number: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketPriceOracle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInterestSetter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketSpreadPremium",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawUnsupportedTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetMinBorrowedValue",
    values: [{ value: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetLiquidationSpread",
    values: [{ value: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetEarningsRate",
    values: [{ value: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsLocalOperator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountPar",
    values: [{ owner: string; number: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetMarginPremium",
    values: [BigNumberish, { value: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCurrentIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketIsClosing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalances",
    values: [{ owner: string; number: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBorrowedValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOperators",
    values: [{ operator: string; trusted: boolean }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawExcessTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerAddMarket",
    values: [
      string,
      string,
      string,
      { value: BigNumberish },
      { value: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "operate",
    values: [
      { owner: string; number: BigNumberish }[],
      {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketWithInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetMarginRatio",
    values: [{ value: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationSpread",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountWei",
    values: [{ owner: string; number: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketTotalPar",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationSpreadForPair",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumExcessTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCachedIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountStatus",
    values: [{ owner: string; number: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getEarningsRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetPriceOracle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetIsClosing",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerSetGlobalOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdjustedAccountValues",
    values: [{ owner: string; number: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketMarginPremium",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInterestRate",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ownerSetSpreadPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsGlobalOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetInterestSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInterestSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketSpreadPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawUnsupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetMinBorrowedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetLiquidationSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetEarningsRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsLocalOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountPar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetMarginPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCurrentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketIsClosing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBorrowedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawExcessTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerAddMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketWithInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketTotalPar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationSpreadForPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumExcessTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCachedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarningsRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetIsClosing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerSetGlobalOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdjustedAccountValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketMarginPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInterestRate",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISoloMargin extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISoloMarginInterface;

  functions: {
    ownerSetSpreadPremium(
      marketId: BigNumberish,
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ownerSetSpreadPremium(uint256,tuple)"(
      marketId: BigNumberish,
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getIsGlobalOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getMarketTokenAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getMarketTokenAddress(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    ownerSetInterestSetter(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ownerSetInterestSetter(uint256,address)"(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
      1: { value: BigNumber; 0: BigNumber };
    }>;

    "getAccountValues(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
      1: { value: BigNumber; 0: BigNumber };
    }>;

    getMarketPriceOracle(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getMarketPriceOracle(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getMarketInterestSetter(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getMarketInterestSetter(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getMarketSpreadPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    "getMarketSpreadPremium(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    getNumMarkets(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getNumMarkets()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ownerWithdrawUnsupportedTokens(
      token: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ownerWithdrawUnsupportedTokens(address,address)"(
      token: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ownerSetMinBorrowedValue(
      minBorrowedValue: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ownerSetMinBorrowedValue(tuple)"(
      minBorrowedValue: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ownerSetLiquidationSpread(
      spread: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ownerSetLiquidationSpread(tuple)"(
      spread: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ownerSetEarningsRate(
      earningsRate: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ownerSetEarningsRate(tuple)"(
      earningsRate: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getIsLocalOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getIsLocalOperator(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getAccountPar(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber };
    }>;

    "getAccountPar(tuple,uint256)"(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber };
    }>;

    ownerSetMarginPremium(
      marketId: BigNumberish,
      marginPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ownerSetMarginPremium(uint256,tuple)"(
      marketId: BigNumberish,
      marginPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getMarginRatio(
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    "getMarginRatio()"(
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    getMarketCurrentIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
    }>;

    "getMarketCurrentIndex(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
    }>;

    getMarketIsClosing(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getMarketIsClosing(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getRiskParams(
      overrides?: CallOverrides
    ): Promise<{
      0: {
        marginRatio: { value: BigNumber; 0: BigNumber };
        liquidationSpread: { value: BigNumber; 0: BigNumber };
        earningsRate: { value: BigNumber; 0: BigNumber };
        minBorrowedValue: { value: BigNumber; 0: BigNumber };
        0: { value: BigNumber; 0: BigNumber };
        1: { value: BigNumber; 0: BigNumber };
        2: { value: BigNumber; 0: BigNumber };
        3: { value: BigNumber; 0: BigNumber };
      };
    }>;

    "getRiskParams()"(
      overrides?: CallOverrides
    ): Promise<{
      0: {
        marginRatio: { value: BigNumber; 0: BigNumber };
        liquidationSpread: { value: BigNumber; 0: BigNumber };
        earningsRate: { value: BigNumber; 0: BigNumber };
        minBorrowedValue: { value: BigNumber; 0: BigNumber };
        0: { value: BigNumber; 0: BigNumber };
        1: { value: BigNumber; 0: BigNumber };
        2: { value: BigNumber; 0: BigNumber };
        3: { value: BigNumber; 0: BigNumber };
      };
    }>;

    getAccountBalances(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
      1: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }[];
      2: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }[];
    }>;

    "getAccountBalances(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
      1: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }[];
      2: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }[];
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    getMinBorrowedValue(
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    "getMinBorrowedValue()"(
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    setOperators(
      args: { operator: string; trusted: boolean }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOperators(tuple[])"(
      args: { operator: string; trusted: boolean }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getMarketPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getMarketPrice(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    ownerWithdrawExcessTokens(
      marketId: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ownerWithdrawExcessTokens(uint256,address)"(
      marketId: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ownerAddMarket(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: { value: BigNumberish },
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ownerAddMarket(address,address,address,tuple,tuple)"(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: { value: BigNumberish },
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    operate(
      accounts: { owner: string; number: BigNumberish }[],
      actions: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "operate(tuple[],tuple[])"(
      accounts: { owner: string; number: BigNumberish }[],
      actions: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getMarketWithInfo(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        token: string;
        totalPar: {
          borrow: BigNumber;
          supply: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        index: {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
          0: BigNumber;
          1: BigNumber;
          2: number;
        };
        priceOracle: string;
        interestSetter: string;
        marginPremium: { value: BigNumber; 0: BigNumber };
        spreadPremium: { value: BigNumber; 0: BigNumber };
        isClosing: boolean;
        0: string;
        1: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
        2: {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
          0: BigNumber;
          1: BigNumber;
          2: number;
        };
        3: string;
        4: string;
        5: { value: BigNumber; 0: BigNumber };
        6: { value: BigNumber; 0: BigNumber };
        7: boolean;
      };
      1: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
      2: { value: BigNumber; 0: BigNumber };
      3: { value: BigNumber; 0: BigNumber };
    }>;

    "getMarketWithInfo(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        token: string;
        totalPar: {
          borrow: BigNumber;
          supply: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        index: {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
          0: BigNumber;
          1: BigNumber;
          2: number;
        };
        priceOracle: string;
        interestSetter: string;
        marginPremium: { value: BigNumber; 0: BigNumber };
        spreadPremium: { value: BigNumber; 0: BigNumber };
        isClosing: boolean;
        0: string;
        1: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
        2: {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
          0: BigNumber;
          1: BigNumber;
          2: number;
        };
        3: string;
        4: string;
        5: { value: BigNumber; 0: BigNumber };
        6: { value: BigNumber; 0: BigNumber };
        7: boolean;
      };
      1: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
      2: { value: BigNumber; 0: BigNumber };
      3: { value: BigNumber; 0: BigNumber };
    }>;

    ownerSetMarginRatio(
      ratio: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ownerSetMarginRatio(tuple)"(
      ratio: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLiquidationSpread(
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    "getLiquidationSpread()"(
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    getAccountWei(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber };
    }>;

    "getAccountWei(tuple,uint256)"(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber };
    }>;

    getMarketTotalPar(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    "getMarketTotalPar(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    getLiquidationSpreadForPair(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    "getLiquidationSpreadForPair(uint256,uint256)"(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    getNumExcessTokens(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber };
    }>;

    "getNumExcessTokens(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber };
    }>;

    getMarketCachedIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
    }>;

    "getMarketCachedIndex(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
    }>;

    getAccountStatus(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "getAccountStatus(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    getEarningsRate(
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    "getEarningsRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    ownerSetPriceOracle(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ownerSetPriceOracle(uint256,address)"(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRiskLimits(
      overrides?: CallOverrides
    ): Promise<{
      0: {
        marginRatioMax: BigNumber;
        liquidationSpreadMax: BigNumber;
        earningsRateMax: BigNumber;
        marginPremiumMax: BigNumber;
        spreadPremiumMax: BigNumber;
        minBorrowedValueMax: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
      };
    }>;

    "getRiskLimits()"(
      overrides?: CallOverrides
    ): Promise<{
      0: {
        marginRatioMax: BigNumber;
        liquidationSpreadMax: BigNumber;
        earningsRateMax: BigNumber;
        marginPremiumMax: BigNumber;
        spreadPremiumMax: BigNumber;
        minBorrowedValueMax: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
      };
    }>;

    getMarket(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        token: string;
        totalPar: {
          borrow: BigNumber;
          supply: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        index: {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
          0: BigNumber;
          1: BigNumber;
          2: number;
        };
        priceOracle: string;
        interestSetter: string;
        marginPremium: { value: BigNumber; 0: BigNumber };
        spreadPremium: { value: BigNumber; 0: BigNumber };
        isClosing: boolean;
        0: string;
        1: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
        2: {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
          0: BigNumber;
          1: BigNumber;
          2: number;
        };
        3: string;
        4: string;
        5: { value: BigNumber; 0: BigNumber };
        6: { value: BigNumber; 0: BigNumber };
        7: boolean;
      };
    }>;

    "getMarket(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        token: string;
        totalPar: {
          borrow: BigNumber;
          supply: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        index: {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
          0: BigNumber;
          1: BigNumber;
          2: number;
        };
        priceOracle: string;
        interestSetter: string;
        marginPremium: { value: BigNumber; 0: BigNumber };
        spreadPremium: { value: BigNumber; 0: BigNumber };
        isClosing: boolean;
        0: string;
        1: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
        2: {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
          0: BigNumber;
          1: BigNumber;
          2: number;
        };
        3: string;
        4: string;
        5: { value: BigNumber; 0: BigNumber };
        6: { value: BigNumber; 0: BigNumber };
        7: boolean;
      };
    }>;

    ownerSetIsClosing(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ownerSetIsClosing(uint256,bool)"(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ownerSetGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ownerSetGlobalOperator(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAdjustedAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
      1: { value: BigNumber; 0: BigNumber };
    }>;

    "getAdjustedAccountValues(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
      1: { value: BigNumber; 0: BigNumber };
    }>;

    getMarketMarginPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    "getMarketMarginPremium(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    getMarketInterestRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;

    "getMarketInterestRate(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
    }>;
  };

  ownerSetSpreadPremium(
    marketId: BigNumberish,
    spreadPremium: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ownerSetSpreadPremium(uint256,tuple)"(
    marketId: BigNumberish,
    spreadPremium: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getIsGlobalOperator(
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getIsGlobalOperator(address)"(
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getMarketTokenAddress(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getMarketTokenAddress(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerSetInterestSetter(
    marketId: BigNumberish,
    interestSetter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ownerSetInterestSetter(uint256,address)"(
    marketId: BigNumberish,
    interestSetter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAccountValues(
    account: { owner: string; number: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    0: { value: BigNumber; 0: BigNumber };
    1: { value: BigNumber; 0: BigNumber };
  }>;

  "getAccountValues(tuple)"(
    account: { owner: string; number: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    0: { value: BigNumber; 0: BigNumber };
    1: { value: BigNumber; 0: BigNumber };
  }>;

  getMarketPriceOracle(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getMarketPriceOracle(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketInterestSetter(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getMarketInterestSetter(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketSpreadPremium(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  "getMarketSpreadPremium(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  getNumMarkets(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumMarkets()"(overrides?: CallOverrides): Promise<BigNumber>;

  ownerWithdrawUnsupportedTokens(
    token: string,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ownerWithdrawUnsupportedTokens(address,address)"(
    token: string,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ownerSetMinBorrowedValue(
    minBorrowedValue: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ownerSetMinBorrowedValue(tuple)"(
    minBorrowedValue: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ownerSetLiquidationSpread(
    spread: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ownerSetLiquidationSpread(tuple)"(
    spread: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ownerSetEarningsRate(
    earningsRate: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ownerSetEarningsRate(tuple)"(
    earningsRate: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getIsLocalOperator(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getIsLocalOperator(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAccountPar(
    account: { owner: string; number: BigNumberish },
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }>;

  "getAccountPar(tuple,uint256)"(
    account: { owner: string; number: BigNumberish },
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }>;

  ownerSetMarginPremium(
    marketId: BigNumberish,
    marginPremium: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ownerSetMarginPremium(uint256,tuple)"(
    marketId: BigNumberish,
    marginPremium: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getMarginRatio(
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  "getMarginRatio()"(
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  getMarketCurrentIndex(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    borrow: BigNumber;
    supply: BigNumber;
    lastUpdate: number;
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  "getMarketCurrentIndex(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    borrow: BigNumber;
    supply: BigNumber;
    lastUpdate: number;
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  getMarketIsClosing(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getMarketIsClosing(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRiskParams(
    overrides?: CallOverrides
  ): Promise<{
    marginRatio: { value: BigNumber; 0: BigNumber };
    liquidationSpread: { value: BigNumber; 0: BigNumber };
    earningsRate: { value: BigNumber; 0: BigNumber };
    minBorrowedValue: { value: BigNumber; 0: BigNumber };
    0: { value: BigNumber; 0: BigNumber };
    1: { value: BigNumber; 0: BigNumber };
    2: { value: BigNumber; 0: BigNumber };
    3: { value: BigNumber; 0: BigNumber };
  }>;

  "getRiskParams()"(
    overrides?: CallOverrides
  ): Promise<{
    marginRatio: { value: BigNumber; 0: BigNumber };
    liquidationSpread: { value: BigNumber; 0: BigNumber };
    earningsRate: { value: BigNumber; 0: BigNumber };
    minBorrowedValue: { value: BigNumber; 0: BigNumber };
    0: { value: BigNumber; 0: BigNumber };
    1: { value: BigNumber; 0: BigNumber };
    2: { value: BigNumber; 0: BigNumber };
    3: { value: BigNumber; 0: BigNumber };
  }>;

  getAccountBalances(
    account: { owner: string; number: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    0: string[];
    1: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }[];
    2: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }[];
  }>;

  "getAccountBalances(tuple)"(
    account: { owner: string; number: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    0: string[];
    1: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }[];
    2: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }[];
  }>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  getMinBorrowedValue(
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  "getMinBorrowedValue()"(
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  setOperators(
    args: { operator: string; trusted: boolean }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOperators(tuple[])"(
    args: { operator: string; trusted: boolean }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getMarketPrice(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getMarketPrice(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  ownerWithdrawExcessTokens(
    marketId: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ownerWithdrawExcessTokens(uint256,address)"(
    marketId: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ownerAddMarket(
    token: string,
    priceOracle: string,
    interestSetter: string,
    marginPremium: { value: BigNumberish },
    spreadPremium: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ownerAddMarket(address,address,address,tuple,tuple)"(
    token: string,
    priceOracle: string,
    interestSetter: string,
    marginPremium: { value: BigNumberish },
    spreadPremium: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  operate(
    accounts: { owner: string; number: BigNumberish }[],
    actions: {
      actionType: BigNumberish;
      accountId: BigNumberish;
      amount: {
        sign: boolean;
        denomination: BigNumberish;
        ref: BigNumberish;
        value: BigNumberish;
      };
      primaryMarketId: BigNumberish;
      secondaryMarketId: BigNumberish;
      otherAddress: string;
      otherAccountId: BigNumberish;
      data: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "operate(tuple[],tuple[])"(
    accounts: { owner: string; number: BigNumberish }[],
    actions: {
      actionType: BigNumberish;
      accountId: BigNumberish;
      amount: {
        sign: boolean;
        denomination: BigNumberish;
        ref: BigNumberish;
        value: BigNumberish;
      };
      primaryMarketId: BigNumberish;
      secondaryMarketId: BigNumberish;
      otherAddress: string;
      otherAccountId: BigNumberish;
      data: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getMarketWithInfo(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: {
      token: string;
      totalPar: {
        borrow: BigNumber;
        supply: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      index: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
      priceOracle: string;
      interestSetter: string;
      marginPremium: { value: BigNumber; 0: BigNumber };
      spreadPremium: { value: BigNumber; 0: BigNumber };
      isClosing: boolean;
      0: string;
      1: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
      2: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
      3: string;
      4: string;
      5: { value: BigNumber; 0: BigNumber };
      6: { value: BigNumber; 0: BigNumber };
      7: boolean;
    };
    1: {
      borrow: BigNumber;
      supply: BigNumber;
      lastUpdate: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    };
    2: { value: BigNumber; 0: BigNumber };
    3: { value: BigNumber; 0: BigNumber };
  }>;

  "getMarketWithInfo(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: {
      token: string;
      totalPar: {
        borrow: BigNumber;
        supply: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      index: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
      priceOracle: string;
      interestSetter: string;
      marginPremium: { value: BigNumber; 0: BigNumber };
      spreadPremium: { value: BigNumber; 0: BigNumber };
      isClosing: boolean;
      0: string;
      1: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
      2: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
      3: string;
      4: string;
      5: { value: BigNumber; 0: BigNumber };
      6: { value: BigNumber; 0: BigNumber };
      7: boolean;
    };
    1: {
      borrow: BigNumber;
      supply: BigNumber;
      lastUpdate: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    };
    2: { value: BigNumber; 0: BigNumber };
    3: { value: BigNumber; 0: BigNumber };
  }>;

  ownerSetMarginRatio(
    ratio: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ownerSetMarginRatio(tuple)"(
    ratio: { value: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLiquidationSpread(
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  "getLiquidationSpread()"(
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  getAccountWei(
    account: { owner: string; number: BigNumberish },
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }>;

  "getAccountWei(tuple,uint256)"(
    account: { owner: string; number: BigNumberish },
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }>;

  getMarketTotalPar(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    borrow: BigNumber;
    supply: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getMarketTotalPar(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    borrow: BigNumber;
    supply: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getLiquidationSpreadForPair(
    heldMarketId: BigNumberish,
    owedMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  "getLiquidationSpreadForPair(uint256,uint256)"(
    heldMarketId: BigNumberish,
    owedMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  getNumExcessTokens(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }>;

  "getNumExcessTokens(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }>;

  getMarketCachedIndex(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    borrow: BigNumber;
    supply: BigNumber;
    lastUpdate: number;
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  "getMarketCachedIndex(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    borrow: BigNumber;
    supply: BigNumber;
    lastUpdate: number;
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  getAccountStatus(
    account: { owner: string; number: BigNumberish },
    overrides?: CallOverrides
  ): Promise<number>;

  "getAccountStatus(tuple)"(
    account: { owner: string; number: BigNumberish },
    overrides?: CallOverrides
  ): Promise<number>;

  getEarningsRate(
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  "getEarningsRate()"(
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  ownerSetPriceOracle(
    marketId: BigNumberish,
    priceOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ownerSetPriceOracle(uint256,address)"(
    marketId: BigNumberish,
    priceOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRiskLimits(
    overrides?: CallOverrides
  ): Promise<{
    marginRatioMax: BigNumber;
    liquidationSpreadMax: BigNumber;
    earningsRateMax: BigNumber;
    marginPremiumMax: BigNumber;
    spreadPremiumMax: BigNumber;
    minBorrowedValueMax: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  "getRiskLimits()"(
    overrides?: CallOverrides
  ): Promise<{
    marginRatioMax: BigNumber;
    liquidationSpreadMax: BigNumber;
    earningsRateMax: BigNumber;
    marginPremiumMax: BigNumber;
    spreadPremiumMax: BigNumber;
    minBorrowedValueMax: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  getMarket(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    token: string;
    totalPar: {
      borrow: BigNumber;
      supply: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    index: {
      borrow: BigNumber;
      supply: BigNumber;
      lastUpdate: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    };
    priceOracle: string;
    interestSetter: string;
    marginPremium: { value: BigNumber; 0: BigNumber };
    spreadPremium: { value: BigNumber; 0: BigNumber };
    isClosing: boolean;
    0: string;
    1: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
    2: {
      borrow: BigNumber;
      supply: BigNumber;
      lastUpdate: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    };
    3: string;
    4: string;
    5: { value: BigNumber; 0: BigNumber };
    6: { value: BigNumber; 0: BigNumber };
    7: boolean;
  }>;

  "getMarket(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    token: string;
    totalPar: {
      borrow: BigNumber;
      supply: BigNumber;
      0: BigNumber;
      1: BigNumber;
    };
    index: {
      borrow: BigNumber;
      supply: BigNumber;
      lastUpdate: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    };
    priceOracle: string;
    interestSetter: string;
    marginPremium: { value: BigNumber; 0: BigNumber };
    spreadPremium: { value: BigNumber; 0: BigNumber };
    isClosing: boolean;
    0: string;
    1: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
    2: {
      borrow: BigNumber;
      supply: BigNumber;
      lastUpdate: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    };
    3: string;
    4: string;
    5: { value: BigNumber; 0: BigNumber };
    6: { value: BigNumber; 0: BigNumber };
    7: boolean;
  }>;

  ownerSetIsClosing(
    marketId: BigNumberish,
    isClosing: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ownerSetIsClosing(uint256,bool)"(
    marketId: BigNumberish,
    isClosing: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ownerSetGlobalOperator(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ownerSetGlobalOperator(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAdjustedAccountValues(
    account: { owner: string; number: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    0: { value: BigNumber; 0: BigNumber };
    1: { value: BigNumber; 0: BigNumber };
  }>;

  "getAdjustedAccountValues(tuple)"(
    account: { owner: string; number: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    0: { value: BigNumber; 0: BigNumber };
    1: { value: BigNumber; 0: BigNumber };
  }>;

  getMarketMarginPremium(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  "getMarketMarginPremium(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  getMarketInterestRate(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  "getMarketInterestRate(uint256)"(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ value: BigNumber; 0: BigNumber }>;

  callStatic: {
    ownerSetSpreadPremium(
      marketId: BigNumberish,
      spreadPremium: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "ownerSetSpreadPremium(uint256,tuple)"(
      marketId: BigNumberish,
      spreadPremium: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getIsGlobalOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMarketTokenAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getMarketTokenAddress(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerSetInterestSetter(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "ownerSetInterestSetter(uint256,address)"(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
      1: { value: BigNumber; 0: BigNumber };
    }>;

    "getAccountValues(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
      1: { value: BigNumber; 0: BigNumber };
    }>;

    getMarketPriceOracle(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getMarketPriceOracle(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketInterestSetter(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getMarketInterestSetter(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketSpreadPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    "getMarketSpreadPremium(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    getNumMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumMarkets()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerWithdrawUnsupportedTokens(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerWithdrawUnsupportedTokens(address,address)"(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerSetMinBorrowedValue(
      minBorrowedValue: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "ownerSetMinBorrowedValue(tuple)"(
      minBorrowedValue: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetLiquidationSpread(
      spread: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "ownerSetLiquidationSpread(tuple)"(
      spread: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetEarningsRate(
      earningsRate: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "ownerSetEarningsRate(tuple)"(
      earningsRate: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    getIsLocalOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getIsLocalOperator(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAccountPar(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }>;

    "getAccountPar(tuple,uint256)"(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }>;

    ownerSetMarginPremium(
      marketId: BigNumberish,
      marginPremium: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "ownerSetMarginPremium(uint256,tuple)"(
      marketId: BigNumberish,
      marginPremium: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    getMarginRatio(
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    "getMarginRatio()"(
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    getMarketCurrentIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrow: BigNumber;
      supply: BigNumber;
      lastUpdate: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    "getMarketCurrentIndex(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrow: BigNumber;
      supply: BigNumber;
      lastUpdate: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    getMarketIsClosing(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getMarketIsClosing(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRiskParams(
      overrides?: CallOverrides
    ): Promise<{
      marginRatio: { value: BigNumber; 0: BigNumber };
      liquidationSpread: { value: BigNumber; 0: BigNumber };
      earningsRate: { value: BigNumber; 0: BigNumber };
      minBorrowedValue: { value: BigNumber; 0: BigNumber };
      0: { value: BigNumber; 0: BigNumber };
      1: { value: BigNumber; 0: BigNumber };
      2: { value: BigNumber; 0: BigNumber };
      3: { value: BigNumber; 0: BigNumber };
    }>;

    "getRiskParams()"(
      overrides?: CallOverrides
    ): Promise<{
      marginRatio: { value: BigNumber; 0: BigNumber };
      liquidationSpread: { value: BigNumber; 0: BigNumber };
      earningsRate: { value: BigNumber; 0: BigNumber };
      minBorrowedValue: { value: BigNumber; 0: BigNumber };
      0: { value: BigNumber; 0: BigNumber };
      1: { value: BigNumber; 0: BigNumber };
      2: { value: BigNumber; 0: BigNumber };
      3: { value: BigNumber; 0: BigNumber };
    }>;

    getAccountBalances(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
      1: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }[];
      2: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }[];
    }>;

    "getAccountBalances(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
      1: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }[];
      2: { sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }[];
    }>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    getMinBorrowedValue(
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    "getMinBorrowedValue()"(
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    setOperators(
      args: { operator: string; trusted: boolean }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setOperators(tuple[])"(
      args: { operator: string; trusted: boolean }[],
      overrides?: CallOverrides
    ): Promise<void>;

    getMarketPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getMarketPrice(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    ownerWithdrawExcessTokens(
      marketId: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerWithdrawExcessTokens(uint256,address)"(
      marketId: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerAddMarket(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: { value: BigNumberish },
      spreadPremium: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "ownerAddMarket(address,address,address,tuple,tuple)"(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: { value: BigNumberish },
      spreadPremium: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    operate(
      accounts: { owner: string; number: BigNumberish }[],
      actions: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "operate(tuple[],tuple[])"(
      accounts: { owner: string; number: BigNumberish }[],
      actions: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    getMarketWithInfo(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        token: string;
        totalPar: {
          borrow: BigNumber;
          supply: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        index: {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
          0: BigNumber;
          1: BigNumber;
          2: number;
        };
        priceOracle: string;
        interestSetter: string;
        marginPremium: { value: BigNumber; 0: BigNumber };
        spreadPremium: { value: BigNumber; 0: BigNumber };
        isClosing: boolean;
        0: string;
        1: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
        2: {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
          0: BigNumber;
          1: BigNumber;
          2: number;
        };
        3: string;
        4: string;
        5: { value: BigNumber; 0: BigNumber };
        6: { value: BigNumber; 0: BigNumber };
        7: boolean;
      };
      1: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
      2: { value: BigNumber; 0: BigNumber };
      3: { value: BigNumber; 0: BigNumber };
    }>;

    "getMarketWithInfo(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        token: string;
        totalPar: {
          borrow: BigNumber;
          supply: BigNumber;
          0: BigNumber;
          1: BigNumber;
        };
        index: {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
          0: BigNumber;
          1: BigNumber;
          2: number;
        };
        priceOracle: string;
        interestSetter: string;
        marginPremium: { value: BigNumber; 0: BigNumber };
        spreadPremium: { value: BigNumber; 0: BigNumber };
        isClosing: boolean;
        0: string;
        1: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
        2: {
          borrow: BigNumber;
          supply: BigNumber;
          lastUpdate: number;
          0: BigNumber;
          1: BigNumber;
          2: number;
        };
        3: string;
        4: string;
        5: { value: BigNumber; 0: BigNumber };
        6: { value: BigNumber; 0: BigNumber };
        7: boolean;
      };
      1: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
      2: { value: BigNumber; 0: BigNumber };
      3: { value: BigNumber; 0: BigNumber };
    }>;

    ownerSetMarginRatio(
      ratio: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "ownerSetMarginRatio(tuple)"(
      ratio: { value: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    getLiquidationSpread(
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    "getLiquidationSpread()"(
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    getAccountWei(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }>;

    "getAccountWei(tuple,uint256)"(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }>;

    getMarketTotalPar(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrow: BigNumber;
      supply: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getMarketTotalPar(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrow: BigNumber;
      supply: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getLiquidationSpreadForPair(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    "getLiquidationSpreadForPair(uint256,uint256)"(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    getNumExcessTokens(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }>;

    "getNumExcessTokens(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ sign: boolean; value: BigNumber; 0: boolean; 1: BigNumber }>;

    getMarketCachedIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrow: BigNumber;
      supply: BigNumber;
      lastUpdate: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    "getMarketCachedIndex(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrow: BigNumber;
      supply: BigNumber;
      lastUpdate: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    getAccountStatus(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<number>;

    "getAccountStatus(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<number>;

    getEarningsRate(
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    "getEarningsRate()"(
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    ownerSetPriceOracle(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "ownerSetPriceOracle(uint256,address)"(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getRiskLimits(
      overrides?: CallOverrides
    ): Promise<{
      marginRatioMax: BigNumber;
      liquidationSpreadMax: BigNumber;
      earningsRateMax: BigNumber;
      marginPremiumMax: BigNumber;
      spreadPremiumMax: BigNumber;
      minBorrowedValueMax: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "getRiskLimits()"(
      overrides?: CallOverrides
    ): Promise<{
      marginRatioMax: BigNumber;
      liquidationSpreadMax: BigNumber;
      earningsRateMax: BigNumber;
      marginPremiumMax: BigNumber;
      spreadPremiumMax: BigNumber;
      minBorrowedValueMax: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    getMarket(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      token: string;
      totalPar: {
        borrow: BigNumber;
        supply: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      index: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
      priceOracle: string;
      interestSetter: string;
      marginPremium: { value: BigNumber; 0: BigNumber };
      spreadPremium: { value: BigNumber; 0: BigNumber };
      isClosing: boolean;
      0: string;
      1: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
      2: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
      3: string;
      4: string;
      5: { value: BigNumber; 0: BigNumber };
      6: { value: BigNumber; 0: BigNumber };
      7: boolean;
    }>;

    "getMarket(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      token: string;
      totalPar: {
        borrow: BigNumber;
        supply: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      index: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
      priceOracle: string;
      interestSetter: string;
      marginPremium: { value: BigNumber; 0: BigNumber };
      spreadPremium: { value: BigNumber; 0: BigNumber };
      isClosing: boolean;
      0: string;
      1: { borrow: BigNumber; supply: BigNumber; 0: BigNumber; 1: BigNumber };
      2: {
        borrow: BigNumber;
        supply: BigNumber;
        lastUpdate: number;
        0: BigNumber;
        1: BigNumber;
        2: number;
      };
      3: string;
      4: string;
      5: { value: BigNumber; 0: BigNumber };
      6: { value: BigNumber; 0: BigNumber };
      7: boolean;
    }>;

    ownerSetIsClosing(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "ownerSetIsClosing(uint256,bool)"(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerSetGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "ownerSetGlobalOperator(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdjustedAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
      1: { value: BigNumber; 0: BigNumber };
    }>;

    "getAdjustedAccountValues(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: { value: BigNumber; 0: BigNumber };
      1: { value: BigNumber; 0: BigNumber };
    }>;

    getMarketMarginPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    "getMarketMarginPremium(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    getMarketInterestRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;

    "getMarketInterestRate(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{ value: BigNumber; 0: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    ownerSetSpreadPremium(
      marketId: BigNumberish,
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ownerSetSpreadPremium(uint256,tuple)"(
      marketId: BigNumberish,
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIsGlobalOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTokenAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketTokenAddress(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerSetInterestSetter(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ownerSetInterestSetter(uint256,address)"(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountValues(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketPriceOracle(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketPriceOracle(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInterestSetter(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketInterestSetter(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketSpreadPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketSpreadPremium(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumMarkets()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerWithdrawUnsupportedTokens(
      token: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ownerWithdrawUnsupportedTokens(address,address)"(
      token: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ownerSetMinBorrowedValue(
      minBorrowedValue: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ownerSetMinBorrowedValue(tuple)"(
      minBorrowedValue: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    ownerSetLiquidationSpread(
      spread: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ownerSetLiquidationSpread(tuple)"(
      spread: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    ownerSetEarningsRate(
      earningsRate: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ownerSetEarningsRate(tuple)"(
      earningsRate: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getIsLocalOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIsLocalOperator(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountPar(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountPar(tuple,uint256)"(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerSetMarginPremium(
      marketId: BigNumberish,
      marginPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ownerSetMarginPremium(uint256,tuple)"(
      marketId: BigNumberish,
      marginPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarginRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketCurrentIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketCurrentIndex(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketIsClosing(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketIsClosing(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRiskParams(overrides?: CallOverrides): Promise<BigNumber>;

    "getRiskParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountBalances(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountBalances(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    getMinBorrowedValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinBorrowedValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    setOperators(
      args: { operator: string; trusted: boolean }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOperators(tuple[])"(
      args: { operator: string; trusted: boolean }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getMarketPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketPrice(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerWithdrawExcessTokens(
      marketId: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ownerWithdrawExcessTokens(uint256,address)"(
      marketId: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ownerAddMarket(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: { value: BigNumberish },
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ownerAddMarket(address,address,address,tuple,tuple)"(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: { value: BigNumberish },
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    operate(
      accounts: { owner: string; number: BigNumberish }[],
      actions: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "operate(tuple[],tuple[])"(
      accounts: { owner: string; number: BigNumberish }[],
      actions: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getMarketWithInfo(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketWithInfo(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerSetMarginRatio(
      ratio: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ownerSetMarginRatio(tuple)"(
      ratio: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getLiquidationSpread(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidationSpread()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountWei(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountWei(tuple,uint256)"(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTotalPar(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketTotalPar(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationSpreadForPair(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidationSpreadForPair(uint256,uint256)"(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumExcessTokens(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumExcessTokens(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCachedIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketCachedIndex(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountStatus(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountStatus(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEarningsRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getEarningsRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerSetPriceOracle(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ownerSetPriceOracle(uint256,address)"(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getRiskLimits(overrides?: CallOverrides): Promise<BigNumber>;

    "getRiskLimits()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarket(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarket(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerSetIsClosing(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ownerSetIsClosing(uint256,bool)"(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ownerSetGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ownerSetGlobalOperator(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAdjustedAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAdjustedAccountValues(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketMarginPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketMarginPremium(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInterestRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketInterestRate(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ownerSetSpreadPremium(
      marketId: BigNumberish,
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ownerSetSpreadPremium(uint256,tuple)"(
      marketId: BigNumberish,
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIsGlobalOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketTokenAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketTokenAddress(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerSetInterestSetter(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ownerSetInterestSetter(uint256,address)"(
      marketId: BigNumberish,
      interestSetter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountValues(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketPriceOracle(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketPriceOracle(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInterestSetter(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketInterestSetter(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketSpreadPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketSpreadPremium(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNumMarkets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerWithdrawUnsupportedTokens(
      token: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ownerWithdrawUnsupportedTokens(address,address)"(
      token: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ownerSetMinBorrowedValue(
      minBorrowedValue: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ownerSetMinBorrowedValue(tuple)"(
      minBorrowedValue: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ownerSetLiquidationSpread(
      spread: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ownerSetLiquidationSpread(tuple)"(
      spread: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ownerSetEarningsRate(
      earningsRate: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ownerSetEarningsRate(tuple)"(
      earningsRate: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getIsLocalOperator(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIsLocalOperator(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountPar(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountPar(tuple,uint256)"(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerSetMarginPremium(
      marketId: BigNumberish,
      marginPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ownerSetMarginPremium(uint256,tuple)"(
      marketId: BigNumberish,
      marginPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getMarginRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMarginRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCurrentIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketCurrentIndex(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketIsClosing(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketIsClosing(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRiskParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRiskParams()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountBalances(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountBalances(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getMinBorrowedValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinBorrowedValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOperators(
      args: { operator: string; trusted: boolean }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOperators(tuple[])"(
      args: { operator: string; trusted: boolean }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getMarketPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketPrice(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerWithdrawExcessTokens(
      marketId: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ownerWithdrawExcessTokens(uint256,address)"(
      marketId: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ownerAddMarket(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: { value: BigNumberish },
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ownerAddMarket(address,address,address,tuple,tuple)"(
      token: string,
      priceOracle: string,
      interestSetter: string,
      marginPremium: { value: BigNumberish },
      spreadPremium: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    operate(
      accounts: { owner: string; number: BigNumberish }[],
      actions: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "operate(tuple[],tuple[])"(
      accounts: { owner: string; number: BigNumberish }[],
      actions: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getMarketWithInfo(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketWithInfo(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerSetMarginRatio(
      ratio: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ownerSetMarginRatio(tuple)"(
      ratio: { value: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getLiquidationSpread(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidationSpread()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountWei(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountWei(tuple,uint256)"(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketTotalPar(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketTotalPar(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationSpreadForPair(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidationSpreadForPair(uint256,uint256)"(
      heldMarketId: BigNumberish,
      owedMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumExcessTokens(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumExcessTokens(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCachedIndex(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketCachedIndex(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountStatus(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountStatus(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEarningsRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEarningsRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerSetPriceOracle(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ownerSetPriceOracle(uint256,address)"(
      marketId: BigNumberish,
      priceOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRiskLimits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRiskLimits()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarket(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarket(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerSetIsClosing(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ownerSetIsClosing(uint256,bool)"(
      marketId: BigNumberish,
      isClosing: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ownerSetGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ownerSetGlobalOperator(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAdjustedAccountValues(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdjustedAccountValues(tuple)"(
      account: { owner: string; number: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketMarginPremium(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketMarginPremium(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInterestRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketInterestRate(uint256)"(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
