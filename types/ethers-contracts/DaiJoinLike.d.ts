/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DaiJoinLikeInterface extends ethers.utils.Interface {
  functions: {
    "vat()": FunctionFragment;
    "dai()": FunctionFragment;
    "join(address,uint256)": FunctionFragment;
    "exit(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "join",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;

  events: {};
}

export class DaiJoinLike extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DaiJoinLikeInterface;

  functions: {
    vat(overrides?: Overrides): Promise<ContractTransaction>;

    "vat()"(overrides?: Overrides): Promise<ContractTransaction>;

    dai(overrides?: Overrides): Promise<ContractTransaction>;

    "dai()"(overrides?: Overrides): Promise<ContractTransaction>;

    join(
      arg0: string,
      arg1: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "join(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    exit(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exit(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  vat(overrides?: Overrides): Promise<ContractTransaction>;

  "vat()"(overrides?: Overrides): Promise<ContractTransaction>;

  dai(overrides?: Overrides): Promise<ContractTransaction>;

  "dai()"(overrides?: Overrides): Promise<ContractTransaction>;

  join(
    arg0: string,
    arg1: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "join(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  exit(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exit(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    vat(overrides?: CallOverrides): Promise<string>;

    "vat()"(overrides?: CallOverrides): Promise<string>;

    dai(overrides?: CallOverrides): Promise<string>;

    "dai()"(overrides?: CallOverrides): Promise<string>;

    join(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "join(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exit(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "exit(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    vat(overrides?: Overrides): Promise<BigNumber>;

    "vat()"(overrides?: Overrides): Promise<BigNumber>;

    dai(overrides?: Overrides): Promise<BigNumber>;

    "dai()"(overrides?: Overrides): Promise<BigNumber>;

    join(
      arg0: string,
      arg1: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "join(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    exit(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exit(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    vat(overrides?: Overrides): Promise<PopulatedTransaction>;

    "vat()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    dai(overrides?: Overrides): Promise<PopulatedTransaction>;

    "dai()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    join(
      arg0: string,
      arg1: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "join(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exit(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
